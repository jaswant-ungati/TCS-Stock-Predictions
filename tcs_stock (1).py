# -*- coding: utf-8 -*-
"""tcs stock
Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k1IaksR-VizVk8iTqtCCr78rCjDE7aaB

# DATASET (TCS STOCK PRICE PREDICTION)
"""

import pandas as pd
import numpy as np
df =pd.read_csv("/content/TCS1.csv")
print(df)

"""# DATA COLLECTION AND PROCESSING"""

df["Date"] = pd.to_datetime(df["Date"], errors="coerce")

print(df.head())

print(df.info())

print(df.describe())

print(df.columns)

print(df.dropna())

df_cleaned=df.dropna()
print(df_cleaned)

print(df.fillna(method='ffill')) # Handle missing values

print(df.fillna(method='bfill'))

df = df.drop_duplicates().reset_index(drop=True) # remove duplicate values

"""# DATA VISUALIZATION"""

import matplotlib.pyplot as plt
# Line Chart → Price movement over time
plt.plot(df["Date"], df["Close"], color="blue")
plt.title("TCS Closing Price Over Time")
plt.xlabel("Date")
plt.ylabel("Close Price")
plt.show()
# Shows how stock price changes with time.

# Histogram → Distribution of Closing Prices
plt.hist(df["Close"], bins=50, color="skyblue", edgecolor="black")
plt.title("Distribution of Closing Prices")
plt.xlabel("Close Price")
plt.ylabel("Frequency")
plt.show()
# Shows which price ranges are more common.

# Bar Chart → Average Closing Price per Year
df["Year"] = df["Date"].dt.year
yearly_avg = df.groupby("Year")["Close"].mean()
yearly_avg.plot(kind="bar", color="orange")
plt.title("Average Closing Price per Year")
plt.xlabel("Year")
plt.ylabel("Average Close Price")
plt.show()
# Compares average stock price for each year.

# Pie Chart → Share of Trading Volume in Selected Years
sample_years = df[df["Year"].isin([2005, 2010, 2015, 2020])]
volume_by_year = sample_years.groupby("Year")["Volume"].sum()
plt.pie(volume_by_year, labels=volume_by_year.index, autopct="%1.1f%%")
plt.title("Share of Trading Volume (Selected Years)")
plt.show()
# Shows share of trading volume across different years.

# Scatter Plot → Closing Price vs Trading Volume
plt.scatter(df["Volume"], df["Close"], alpha=0.5, color="green")
plt.title("Closing Price vs Trading Volume")
plt.xlabel("Trading Volume")
plt.ylabel("Close Price")
plt.show()
# Shows relation between stock price and trading volume.

# Moving Average Line Chart → Trend Smoothing
df["MA30"] = df["Close"].rolling(30).mean()
plt.plot(df["Date"], df["Close"], label="Close", alpha=0.6)
plt.plot(df["Date"], df["MA30"], label="30-Day MA", color="red")
plt.legend()
plt.title("Close Price with 30-Day Moving Average")
plt.show()
# Smooths price movements to show main trend.

"""# Machine Learning Model Implementation"""

#  Machine Learning Model Implementation
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
from math import sqrt
import seaborn as sns
import matplotlib.pyplot as plt

X = df[["Open", "High", "Low", "Volume"]].astype(float)
y = df["Close"].astype(float)

# Train-Test Split (80% train, 20% test)
split = int(len(df) * 0.8)
X_train, X_test = X.iloc[:split], X.iloc[split:]
y_train, y_test = y.iloc[:split], y.iloc[split:]
dates_test = df.loc[X_test.index, "Date"]

# Models (Training and Predictions)
lr = LinearRegression()
rf = RandomForestRegressor(n_estimators=200, random_state=42)

# Drop rows with NaN values from the training data
X_train_cleaned = X_train.dropna()
y_train_cleaned = y_train[X_train_cleaned.index]

# Drop rows with NaN values from the test data
X_test_cleaned = X_test.dropna()
y_test_cleaned = y_test[X_test_cleaned.index]


lr.fit(X_train_cleaned, y_train_cleaned)
rf.fit(X_train_cleaned, y_train_cleaned)

# Predict on the cleaned test data
lr_pred = lr.predict(X_test_cleaned)
rf_pred = rf.predict(X_test_cleaned)

# Update the y_test variable to the cleaned version for evaluation and plotting
y_test = y_test_cleaned

def evaluate(y_true, y_pred):
    mae = mean_absolute_error(y_true, y_pred)
    rmse = sqrt(mean_squared_error(y_true, y_pred))
    return mae, rmse

print("Linear Regression :", evaluate(y_train_cleaned, lr_pred))
print("Random Forest Regression:", evaluate(y_train_cleaned, rf_pred))

"""# Model Visualization"""

#  Prediction vs Actual (Line Plot)
plt.figure(figsize=(12,6))
dates_test_cleaned = dates_test[X_test_cleaned.index]
plt.plot(dates_test_cleaned, y_test, label="Actual", color="black")
plt.plot(dates_test_cleaned, lr_pred, label="Linear Regression", color="blue")
plt.plot(dates_test_cleaned, rf_pred, label="Random Forest", color="green")
plt.legend()
plt.title("Close Price Prediction (Actual vs Predicted)")
plt.xlabel("Date")
plt.ylabel("Close Price")
plt.show()

# Error Distribution (Seaborn Histogram)
plt.figure(figsize=(8,5))
sns.histplot(y_test - lr_pred, bins=30, color="blue", label="LR Error", alpha=0.6)
sns.histplot(y_test - rf_pred, bins=30, color="green", label="RF Error", alpha=0.6)
plt.legend()
plt.title("Prediction Error Distribution")
plt.xlabel("Error (Actual - Predicted)")
plt.show()

# Scatter Plot: Actual vs Predicted
plt.figure(figsize=(6,6))
sns.scatterplot(x=y_test, y=lr_pred, color="blue", label="Linear Regression")
sns.scatterplot(x=y_test, y=rf_pred, color="green", label="Random Forest")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.title("Actual vs Predicted Close Price")
plt.xlabel("Actual Close")
plt.ylabel("Predicted Close")
plt.legend()
plt.show()
